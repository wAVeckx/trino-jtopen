/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.plugin.jtopen;

import org.junit.jupiter.api.Test;

import java.sql.SQLException;

import static io.trino.plugin.jtopen.JTOpenQueryResult.row;
import static io.trino.plugin.jtopen.JTOpenTestDriver.onJTOpen;
import static java.lang.String.format;

public class JTOpenTestCreateTable
        extends JTOpenBaseTest
{
    @Test
    public void testCreateTable()
            throws SQLException
    {
        String tableName = null;
        try {
            // Create a JTOpen test table from an existing TPCH table: tpch.tiny.nation.
            tableName = createTinyNationTable();

            // Verify the result of a select statement. This select statement returns four rows:
            // ALGERIA,
            // ARGENTINA,
            // BRAZIL,
            // CANADA
            onJTOpen().executeQuery(format("select name from %s where nationKey<4", tableName))
                    .containsOnly(
                            row("ALGERIA"),
                            row("ARGENTINA"),
                            row("BRAZIL"),
                            row("CANADA"));

            // The following select statement returns one integer row value.
            onJTOpen().executeQuery(format("select nationKey from %s where name='CANADA'", tableName))
                    .containsOnly(row(3));

            // Verify that the following select statement returns no rows.
            onJTOpen().executeQuery(format("select name from %s where nationKey < 0", tableName))
                    .hasNoRows();
        }
        // Drop the test table at the end of the test
        finally {
            cleanup(tableName);
        }
    }
}
