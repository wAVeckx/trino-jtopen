/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.plugin.jtopen;

import java.io.Closeable;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import static java.lang.String.format;

public class JTOpenTestDriver
        implements Closeable, ITestConfigurationConstants
{
    private static JTOpenTestDriver jtopenDriver;
    private Connection fConnection;

    private JTOpenTestDriver(Connection connection)
    {
        fConnection = connection;
    }

    public static JTOpenTestDriver onJTOpen()
            throws SQLException
    {
        if (jtopenDriver == null) {
            try {
                Class.forName("io.trino.jdbc.TrinoDriver");
            }
            catch (ClassNotFoundException ex) {
                logException(ex);
            }

            Connection conn = DriverManager.getConnection(JTOPEN_JDBC_URL, TRINO_JDBC_USER, "");
            if (conn != null) {
                jtopenDriver = new JTOpenTestDriver(conn);
            }
        }

        return jtopenDriver;
    }

    public Connection connection()
    {
        return fConnection;
    }

    public JTOpenQueryResult executeQuery(String sqlString)
            throws SQLException
    {
        Statement stmt = fConnection.createStatement();
        ResultSet resultSet = stmt.executeQuery(sqlString);
        return new JTOpenQueryResult(resultSet);
    }

    public int executeUpdate(String sqlString)
            throws SQLException
    {
        try (Statement stmt = fConnection.createStatement()) {
            return stmt.executeUpdate(sqlString);
        }
    }

    public int createSchema(String schemaName)
            throws SQLException
    {
        return executeUpdate(format("CREATE SCHEMA IF NOT EXISTS %s", schemaName));
    }

    public int dropTable(String tableName)
            throws SQLException
    {
        return executeUpdate(format("DROP TABLE IF EXISTS %s", tableName));
    }

    /**
     * Create a new table from an existing table
     *
     * @param newTableName the fully qualified name of the new table
     * @param existingTableName the fully qualified name of the old table
     * @return the row count or zero
     * @throws SQLException if a database access error occurs.
     */
    public int createTableFrom(String newTableName, String existingTableName)
            throws SQLException
    {
        return executeUpdate(format("CREATE TABLE %s AS SELECT * FROM %s",
                newTableName, existingTableName));
    }

    public static void logException(Exception ex)
    {
        System.err.println(ex.getLocalizedMessage());
        ex.printStackTrace();
    }

    public static JTOpenQueryResult assertThat(ResultSet resultSet)
    {
        return new JTOpenQueryResult(resultSet);
    }

    @Override
    public void close()
            throws IOException
    {
        try {
            if (fConnection != null) {
                fConnection.close();
            }
        }
        catch (SQLException ex) {
        }
    }
}
